name: Publish CUDA 12 to PyPi

on:
  release:
    types: [published]

  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019, ubuntu-20.04]
        cibw_archs: ["auto64"]
        cibw_build: ["cp38-*", "cp39-*", "cp310-*", "cp311-*"]

    steps:
      - uses: actions/checkout@v3
        name: Check out
        with:
          submodules: recursive    

      - uses: ilammy/msvc-dev-cmd@v1
        name: Add MSVS Path

      - name: Install CUDA
        if: runner.os == 'Windows'
        env: 
          cuda: "12.0.0"
          visual_studio: "Visual Studio 16 2019"
        shell: powershell
        run: .\ci-utils\install_cuda_windows.ps1

      - name: nvcc check
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          nvcc -V
          ls $env:CUDA_PATH
          ls $env:CUDA_PATH\bin
          ls $env:CUDA_PATH\include

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.9'
 
      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel==2.16.2 delvewheel wheel

      - name: Building wheels 
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_SKIP: "*musllinux*"
          CIBW_BUILD_VERBOSITY: 3
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_BEFORE_ALL_LINUX:  yum install -y llvm libevent-devel openssl-devel &&
                                   bash ci-utils/install_cuda_yum.sh 12 && 
                                   bash ci-utils/install_arrow_yum.sh &&
                                   bash ci-utils/install_prereq_linux.sh --build_arrow no &&
                                   mkdir -p /tmp/nyxus_bld &&
                                   cp -r local_install /tmp/nyxus_bld
          CIBW_BEFORE_ALL_WINDOWS: nvcc -V &&
                                   ci-utils\install_prereq_win.bat &&
                                   xcopy /E /I /y local_install C:\TEMP\nyxus_bld\local_install
          CIBW_ENVIRONMENT_LINUX: LD_LIBRARY_PATH="/tmp/nyxus_bld/local_install/lib:/tmp/nyxus_bld/local_install/lib64:/usr/local/cuda/targets/x86_64-linux/lib:$LD_LIBRARY_PATH" CPATH="/usr/local/cuda/targets/x86_64-linux/include:$CPATH" PATH="/usr/local/cuda/bin:$PATH" ON_GITHUB="TRUE" NYXUS_DEP_DIR="/tmp/nyxus_bld/local_install" CXXFLAGS="-I /usr/local/cuda/include" CMAKE_ARGS="-DUSEGPU=ON -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc -DCMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES=/usr/local/cuda/include" 
          CIBW_ENVIRONMENT_WINDOWS: PATH="$TEMP\\nyxus\\bin;$PATH" ON_GITHUB="TRUE" NYXUS_DEP_DIR="C:\\TEMP\\nyxus_bld\\local_install" CMAKE_ARGS="-DUSEGPU=ON"
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -w {dest_dir} {wheel} --no-dll cufft64_11.dll;cufftw64_11.dll;cudart32_120.dll;cudart64_120.dll"
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: auditwheel repair --exclude=libcufft.so --exclude=libcufft.so.11 --exclude=libcufft.so.11.0.12.1  --exclude=libcudart.so --exclude=libcudart.so.12 --exclude=libcudart.so.12.3.101  -w {dest_dir} {wheel}
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          CIBW_TEST_REQUIRES: numpy pandas pyarrow pytest bfio
          CIBW_BEFORE_TEST_WINDOWS: xcopy /E /I /y "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.0\bin" %SystemRoot%\System32
          CIBW_TEST_COMMAND: pytest -vv {project}/tests/python -m "not skip_ci"

      - name: Install Dependencies
        run: python -m pip install --upgrade twine requests
        
      - name: Publish to PyPi
        run: python -m twine upload dist/*.whl
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY_CUDA12 }}
          TWINE_REPOSITORY: pypi